package com.kmove.app.user.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.kmove.app.comm.Err;
import com.kmove.app.review.service.ReviewService;
import com.kmove.app.review.vo.ReviewVo;
import com.kmove.app.user.service.UserService;
import com.kmove.app.user.vo.UserVo;

@Controller
public class UserController {

	@Autowired
	UserService userservice; // UserService를 자동 주입하여 서비스 로직을 호출합니다.
	@Autowired
	ReviewService reviewservice;

	/**
	 * 회원 가입 요청에 응답하는 컨트롤러입니다.
	 * 
	 * @param uvo        회원 폼
	 * @param jspprofile 사용자가 업로드한 이미지(프로필)
	 * @param 리다이렉트와     동시에 전달할 메시지
	 * @return 회원 가입 성공/실패에 따른 결과 페이지
	 * @throws Exception
	 */
	@RequestMapping(value = "user/join")
	public String userjoin(@ModelAttribute UserVo uvo, @RequestParam MultipartFile jspprofile, RedirectAttributes rattr)
			throws Exception {

		// 회원 가입 결과를 담을 변수. 1은 성공, 0은 실패
		int res = userservice.userjoin(uvo, jspprofile);
		System.out.println("회원가입 => " + (res == 1 ? "성공" : "실패"));

		// 회원 가입 성공 시
		if (res == 1) {
			rattr.addAttribute("msg", "SUCCESS"); // 리다이렉트 시 성공 메시지 추가
			return "redirect:/"; // 홈 페이지로 리다이렉트
		}

		// 회원 가입 실패 시 오류 메시지
		else if (res == 0) {
			return Err.ErrPage(rattr, "다른 유저가 먼저 DB에 저장했거나 Mapper쿼리 문제같아.."); // 실패 페이지로 이동
		}

		// 예기치 않은 오류가 발생한 경우
		else {
			return Err.ErrPage(rattr, "왠진 모르겠는데 3개 이상의 계정이 가입되어버렸는데..? (O_O)"); // 실패 페이지로 이동
		}
	}

	/**
	 * 회원 정보 수정을 요청하는 메서드입니다.
	 * 
	 * @param uvo     수정할 회원 정보
	 * @param request HTTP 요청 객체
	 * @return 수정 완료 후 리다이렉트될 페이지
	 */
	@RequestMapping("Update-password")
	public String updateuppw(@ModelAttribute UserVo uvo, RedirectAttributes rattr) throws Exception {
		System.out.println("upw>>" + uvo.getUpw());
		System.out.println("uid>>" + uvo.getUid());
		System.out
				.println("\n\n (UserController 70번쨰 라인 ※※주의※※※)해당 요청은 별다른 판별없이 그냥 비밀번호를 바꿔버리는 로직임!! 차후 반드시 수정!! \n\n");
		int res = userservice.updateuppw(uvo);
		if (res == 1) {
			rattr.addFlashAttribute("msg", "uppw_OK");
			return "redirect:/userupdate";
		} else if (res == 0) {
			return Err.ErrPage(rattr, "뭔가가 달라서 실패했어...");
		} else {
			return Err.ErrPage(rattr, "????혹시 비밀번호나 기본키 겹치는지 확인해줘..");
		}
	}

	/**
	 * 마이페이지(user.info)에서 수행됩니다. session의 Uidx값을 통해서 Blocked DB에 자신이 추가한 차단 대상 목록을
	 * 가져옵니다.
	 * 
	 * @param session 로그인한 사람의 Uidx를 가져옵니다.
	 * 
	 * @param model   목록리스트를 뽑아서 user.info로 넘깁니다.
	 */
	@RequestMapping(value = "/Search_Blocked")
	public String Search_Blocked(HttpSession session, Model model) throws Exception {
		System.out.println("차단유저 목록 . .");
		model.addAttribute("BlockedList", userservice.getBlockedUser(session));

		return "user/userinfo";
	}

	/**
	 * 회원 정보 수정을 요청하는 메서드입니다.
	 * 
	 * @param uvo     수정할 회원 정보
	 * @param request HTTP 요청 객체
	 * @return 수정 완료 후 리다이렉트될 페이지
	 * @throws Exception
	 */
	@RequestMapping("/User_Update-password")
	@ResponseBody
	public String updateuppw(@ModelAttribute UserVo uvo, HttpSession session, RedirectAttributes rattr)
			throws Exception {
		System.out.println("upw>>" + uvo.getUpw());
		System.out.println("uid>>" + uvo.getUid());
		int res = userservice.updateuppw(uvo);
		System.out.println("res>>" + res);
		System.out.println("controller out==");
		String msg = "";
		if (res == 1) {
			rattr.addFlashAttribute("msg", "uppw_OK");
			return "user/userinfo";
		} else {
			rattr.addFlashAttribute("msg", "uppw_ERR");
			return "user/userinfo";
		}
	}

	/**
	 * @param uvo 가져오는 유저임
	 */
	@RequestMapping("/User_Update-info")
	public String updateinfo(@ModelAttribute UserVo uvo, HttpSession session, RedirectAttributes rattr)
			throws Exception {
		System.out.println("controller진입");
		System.out.println(uvo.getUid());
		System.out.println(uvo.getUmail());
		System.out.println(uvo.getUphone());
		int res = userservice.updateinfo(uvo);
		System.out.println("res>>" + res);
		String msg = "";
		if (res == 1) {
			msg = "up_OK";
			rattr.addFlashAttribute("msg", msg);
			return "redirect:/";
		} else {
			msg = "up_ERR";
			rattr.addFlashAttribute("msg", msg);
			return "redirect:/";
		}

	}

	/**
	 * 회원의 ID를 찾기 위한 요청을 처리하는 메서드입니다.
	 * 
	 * @return ID 찾기 페이지로 리다이렉트
	 * @throws Exception
	 */
	@RequestMapping("Find_Uid")
	public String finduid() throws Exception {
		return "";
	}

	/**
	 * 회원의 비밀번호를 분실했을 때 요청을 처리하는 메서드입니다.
	 * 
	 * @return 비밀번호 찾기 페이지로 리다이렉트
	 * @throws Exception
	 */
	@RequestMapping("Find_Upw")
	public String findupw() throws Exception {
		return "";
	}
	
	@RequestMapping(value ="files", method =RequestMethod.GET)
	public ModelAndView getFiles() throws Exception{
		List<fileVO> flast = dao.getFiles();
	Map<Integer,fileVo> fdata = new HashMap(); 
	
		return mv;
	}
	
	
}
